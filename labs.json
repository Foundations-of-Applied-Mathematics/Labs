{
"PythonIntro": {
    "volume": "PythonEssentials",
    "title": "Introduction to Python",
    "spec": ["python_intro.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": []
    },
"StandardLibrary": {
    "volume": "PythonEssentials",
    "title": "The Standard Library",
    "spec": ["standard_library.py", "box.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": []
    },
"ObjectOriented": {
    "volume": "PythonEssentials",
    "title": "Object-oriented Programming",
    "spec": ["object_oriented.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": []
    },
"NumpyIntro": {
    "volume": "PythonEssentials",
    "title": "Introduction to NumPy",
    "spec": ["numpy_intro.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "grid.npy"
        ]
    },
"MatplotlibIntro": {
    "volume": "PythonEssentials",
    "title": "Introduction to Matplotlib",
    "spec": ["matplotlib_intro.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "FARS.npy"
        ]
    },
"Exceptions_FileIO": {
    "volume": "PythonEssentials",
    "title": "Exceptions and File Input/Output",
    "spec": ["exceptions_fileIO.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "hello_world.txt",
        "cf_example1.txt",
        "cf_example2.txt"
        ]
    },
"UnitTesting": {
    "volume": "PythonEssentials",
    "title": "Unit Testing",
    "spec": ["specs.py", "test_specs.py"],
    "solutions": ["solutions.py", "test_solutions.py"],
    "driver": "test_driver.py",
    "data": []
    },
"Profiling": {
    "volume": "PythonEssentials",
    "title": "Profiling",
    "spec": ["profiling.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "names.txt",
        "triangle.txt",
        "triangle_large.txt"
        ]
    },
"SympyIntro": {
    "volume": "PythonEssentials",
    "title": "Introduction to SymPy",
    "spec": ["sympy_intro.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": []
    },
"DataVisualization": {
    "volume": "PythonEssentials",
    "title": "Data Visualization",
    "spec": ["data_visualization.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": [
        "anscombe.npy",
        "MLB.npy",
        "earthquakes.npy",
        "countries.npy"
        ]
    },

"LinearTransformations": {
    "volume": "Volume1",
    "title": "Linear Transformations",
    "spec": ["linear_transformations.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "horse.npy"
        ]
    },
"LinearSystems": {
    "volume": "Volume1",
    "title": "Linear Systems",
    "spec": ["linear_systems.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": []
    },
"QR_Decomposition": {
    "volume": "Volume1",
    "title": "The QR Decomposition",
    "spec": ["qr_decomposition.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": []
    },
"LeastSquares_Eigenvalues": {
    "volume": "Volume1",
    "title": "Least Squares and Computing Eigenvalues",
    "spec": ["lstsq_eigs.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "circle.npy",
        "ellipse.npy",
        "housing.npy"
        ]
    },
"ImageSegmentation": {
    "volume": "Volume1",
    "title": "Image Segmentation",
    "spec": ["image_segmentation.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "dream.png",
        "dream_gray.png",
		"blue_heart.png",
		"HeartMatrixA.npz",
		"HeartMatrixD.npy"
        ]
    },
"SVD_ImageCompression": {
    "volume": "Volume1",
    "title": "The SVD and Image Compression",
    "spec": ["svd_image_compression.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "hubble.jpg",
        "hubble_gray.jpg"
        ]
    },
"FacialRecognition": {
    "volume": "Volume1",
    "title": "Facial Recognition",
    "spec": ["facial_recognition.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": [
        "faces94.zip"
        ]
    },
"Differentiation": {
    "volume": "Volume1",
    "title": "Differentiation",
    "spec": ["differentiation.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "plane.npy"
        ]
    },
"NewtonsMethod": {
    "volume": "Volume1",
    "title": "Newton's Method",
    "spec": ["newtons_method.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": []
    },
"Conditioning_Stability": {
    "volume": "Volume1",
    "title": "Conditioning and Stability",
    "spec": ["conditioning_stability.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "stability_data.npy"
        ]
    },
"MonteCarloIntegration": {
    "volume": "Volume1",
    "title": "Monte Carlo Integration",
    "spec": ["montecarlo_integration.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": []
    },
"ComplexFunctions": {
    "volume": "Volume1",
    "title": "Visualizing Complex-valued Functions",
    "spec": ["complex_functions.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": []
    },
"PageRank": {
    "volume": "Volume1",
    "title": "The PageRank Algorithm",
    "spec": ["pagerank.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "web_stanford.txt",
        "ncaa2010.csv",
        "ncaa2011.csv",
        "ncaa2012.csv",
        "ncaa2013.csv",
        "ncaa2014.csv",
        "ncaa2015.csv",
        "ncaa2016.csv",
        "ncaa2017.csv",
        "top250movies.txt"
        ]
    },
"DrazinInverse": {
    "volume": "Volume1",
    "title": "The Drazin Inverse",
    "spec": ["drazin.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "social_network.csv"
        ]
    },
"IterativeSolvers": {
    "volume": "Volume1",
    "title": "Iterative Solvers",
    "spec": ["iterative_solvers.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": []
    },
"Arnoldi": {
    "volume": "Volume1",
    "title": "The Arnoldi Iteration",
    "spec": ["arnoldi.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": []
    },
"GMRES": {
    "volume": "Volume1",
    "title": "GMRES",
    "spec": ["gmres.py"],
    "solutions": ["solutions.py"],
    "driver": null,
    "data": []
    },

"LinkedLists": {
    "volume": "Volume2",
    "title": "Linked Lists",
    "spec": ["linked_lists.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "english.txt"
        ]
    },
"BinaryTrees": {
    "volume": "Volume2",
    "title": "Binary Search Trees",
    "spec": ["binary_trees.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "english.txt"
        ]
    },
"NearestNeighbor": {
    "volume": "Volume2",
    "title": "Nearest Neighbor Search",
    "spec": ["nearest_neighbor.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "mnist_subset.npz"
        ]
    },
"BreadthFirstSearch": {
    "volume": "Volume2",
    "title": "Breadth-first Search",
    "spec": ["breadth_first_search.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "movie_data.txt",
		"movie_data_small.txt"
        ]
    },
"MarkovChains": {
    "volume": "Volume2",
    "title": "Markov Chains",
    "spec": ["markov_chains.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "yoda.txt"
        ]
    },
"FourierTransform": {
    "volume": "Volume2",
    "title": "The Discrete Fourier Transform / Convolution and Filtering",
    "spec": ["fourier_transform.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": [
        "tada.wav",
        "mystery_chord.wav",
        "CGC.wav",
        "GCG.wav",
        "balloon.wav",
        "chopin.wav",
        "noisy1.wav",
        "noisy2.wav",
        "vuvuzela.wav",
        "noisy_face.png",
        "license_plate.png"
        ]
    },
"Wavelets": {
    "volume": "Volume2",
    "title": "Introduction to Wavelets",
    "spec": ["wavelets.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": [
        "mandrill.png",
        "woman_darkhair.png",
        "noisy_darkhair.png",
        "uncompressed_finger.png"
        ]
    },
"PolynomialInterpolation": {
    "volume": "Volume2",
    "title": "Polynomial Interpolation",
    "spec": ["polynomial_interpolation.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "airdata.npy"
        ]
},
"GaussianQuadrature": {
    "volume": "Volume2",
    "title": "Gaussian Quadrature",
    "spec": ["gaussian_quadrature.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": []
    },
"OneD_Optimization": {
    "volume": "Volume2",
    "title": "One-dimensional Optimization",
    "spec": ["oneD_optimization.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": []
    },
"GradientMethods": {
    "volume": "Volume2",
    "title": "Gradient Descent Methods",
    "spec": ["gradient_methods.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "linregression.txt",
        "challenger.npy"
        ]
    },
"Simplex": {
    "volume": "Volume2",
    "title": "The Simplex Algorithm",
    "spec": ["simplex.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "productMix.npz"
        ]
    },
"OpenGym": {
    "volume": "Volume2",
    "title": "OpenGym AI",
    "spec": ["opengym.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": []
    },
"CVXPY_Intro": {
    "volume": "Volume2",
    "title": "CVXPY",
    "spec": ["cvxpy_intro.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "food.npy"
        ]
    },
"InteriorPoint_Linear": {
    "volume": "Volume2",
    "title": "Interior Point 1: Linear Programs",
    "spec": ["interior_point_linear.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "simdata.txt"
        ]
    },
"InteriorPoint_Quadratic": {
    "volume": "Volume2",
    "title": "Interior Point 2: Quadratic Programs",
    "spec": ["interior_point_quadratic.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "portfolio.txt"
        ]
    },
"DynamicProgramming": {
    "volume": "Volume2",
    "title": "Dynamic Programming",
    "spec": ["dynamic_programming.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": []
    },
"PolicyFunctionIteration": {
    "volume": "Volume2",
    "title": "Policy Function Iteration",
    "spec": ["policy_iteration.py"],
    "solutions": ["solutions.py"],
    "driver": null,
    "data": []
    },


"UnixShell1": {
    "volume": "DataScienceEssentials",
    "title": "Unix Shell 1: Introduction",
    "spec": ["unixshell1.sh"],
    "solutions": ["solutions.sh"],
    "driver": "test_driver.py",
    "data": [
        "Shell1.zip"
        ]
    },
"UnixShell2": {
    "volume": "DataScienceEssentials",
    "title": "Unix Shell 2",
    "spec": ["shell2.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "Shell2.zip"
        ]
    },
"RegularExpressions": {
    "volume": "DataScienceEssentials",
    "title": "Regular Expressions",
    "spec": ["regular_expressions.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "fake_contacts.txt"
        ]
    },
"SQL1": {
    "volume": "DataScienceEssentials",
    "title": "SQL 1: Introduction",
    "spec": ["sql1.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "student_info.csv",
        "student_grades.csv",
        "us_earthquakes.csv"
        ]
    },
"SQL2": {
    "volume": "DataScienceEssentials",
    "title": "SQL 2 (The Sequel)",
    "spec": ["sql2.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "students.db"
        ]
    },
"WebTechnologies": {
    "volume": "DataScienceEssentials",
    "title": "Web Technologies",
    "spec": ["web_technologies.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "nyc_traffic.json"
        ]
    },
"WebScraping": {
    "volume": "DataScienceEssentials",
    "title": "Web Scraping",
    "spec": ["web_scraping.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
        "example.html",
        "san_diego_weather.html",
        "large_banks_index.html",
        "large_banks_data.html"
        ]
    },
"WebCrawling": {
    "volume": "DataScienceEssentials",
    "title": "Web Crawling",
    "spec": ["web_crawling.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": []
    },
"Pandas1": {
    "volume": "DataScienceEssentials",
    "title": "Pandas 1: Introduction",
    "spec": ["pandas1.ipynb"],
    "solutions": ["solutions.py","solutions.ipynb"],
    "driver": "test_driver.py",
    "data": [
        "crime_data.csv",
        "budget.csv",
		    "DJIA.csv",
		    "paychecks.csv"
        ]
    },
"Pandas2": {
    "volume": "DataScienceEssentials",
    "title": "Pandas 2: Plotting",
    "spec": ["pandas2.ipynb"],
    "solutions": ["solutions.py","solutions.ipynb"],
    "driver": "test_driver.py",
    "data": [
        "crime_data.csv",
        "college.csv",
		"budget.csv"
        ]
    },
"Pandas3": {
    "volume": "DataScienceEssentials",
    "title": "Pandas 3: Grouping",
    "spec": ["pandas3.ipynb"],
    "solutions": ["solutions.py","solutions.ipynb"],
    "driver": "test_driver.py",
    "data": [
        "Ohio_1999.csv",
        "college.csv",
		"mammal_sleep.csv",
		"titanic.csv"
        ]
    },
"Pandas4": {
    "volume": "DataScienceEssentials",
    "title": "Pandas 4: GeoPandas",
    "spec": ["pandas4.ipynb","pandas4_colab.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": [
		"airports.csv",
		"county_data.gpkg",
		"nytimes"
        ]
    },
"DataCleaning": {
    "volume": "DataScienceEssentials",
    "title": "Data Cleaning and Feature Importance",
    "spec": ["data_cleaning.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": [
        "g_t_results.csv",
        "imdb.csv",
        "basketball.csv",
        "housing.csv",
        "housing_data_description.csv",
        "toy_dataset.csv"
    ]
   },
"Ethics": {
    "volume": "DataScienceEssentials",
    "title": "Ethics in Machine Learning",
    "spec": ["ethics.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": [
		"facility_map.p",
		"melanoma_test.pkl",
		"melanoma_test_modified.pkl",
		"melanoma_train.pkl",
		"offense_map.p",
		"resumes_pred.csv",
		"resumes_train.csv",
		"sentence_labeled.csv",
		"sentence_unlabeled.csv",
		"skill.txt"
	]
    },
"MongoDB": {
    "volume": "DataScienceEssentials",
    "title": "MongoDB",
    "spec": ["mongodb.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": [
        "trump.json.zip"
        ]
    },
"Parallel_Intro": {
    "volume": "DataScienceEssentials",
    "title": "Introduction to Parallel Computing",
    "spec": ["spec.py"],
    "solutions": ["solutions.py"],
    "driver": null,
    "data": []
    },
"MPI": {
    "volume": "DataScienceEssentials",
    "title": "Parallel Programming with MPI",
    "spec": ["problem1.py","problem2.py","problem3.py","problem4.py"],
    "solutions": ["problem1_solution.py","problem2_solution.py","problem3_solution.py","problem4_solution.py"],
    "driver": null,
    "data": []
    },
"Spark": {
    "volume": "DataScienceEssentials",
    "title": "Introduction to Apache Spark",
    "spec": ["spark.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
    		"titanic.csv",
    		"huck_finn.txt",
    		"london_income_by_borough.csv",
    		"london_crime_by_lsoa.csv.lrz"
		    ]
    },
"ARMA": {
    "volume": "Volume3",
    "title": "ARMA Models",
    "spec": ["arma.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": ["weather.npy"]
  },
"CDHMM": {
    "volume": "Volume3",
    "title": "Speech Recognition using CDHMMs",
    "spec": ["speechrecognition.py","gmm.py","gmmhmm.py","MFCC.py"],
    "solutions": [],
    "driver": null,
    "data": ["Samples.zip"]
    },
"KalmanFilter": {
    "volume": "Volume3",
    "title": "Kalman Filter",
    "spec": ["kalman_filter.py"],
    "solutions": ["solutions.py"],
    "driver": null,
    "data": []
    },
"KMeans": {
    "volume": "Volume3",
    "title": "K-Means Clustering",
    "spec": ["kmeans_clustering.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": ["earthquake_coordinates.npy",
		"nasa.zip"]
    },
"Metropolis": {
    "volume": "Volume3",
    "title": "Metropolis Algorithm",
    "spec": ["metropolis.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": ["examscores.npy"]
    },
"LSI_SkLearn": {
    "volume": "Volume3",
    "title": "Principal Component Analysis and SkLearn",
    "spec": ["lsi_sklearn.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": ["Addresses.zip"]
    },
"RandomForest": {
    "volume": "Volume3",
    "title": "Trees and Random Forests",
    "spec": ["random_forest.py"],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": [
		"parkinsons.csv",
		"parkinsons_features.csv",
		"animals.csv",
		"animal_names.csv",
		"animal_features.csv"]
    },
"NaiveBayes": {
    "volume": "Volume3",
    "title": "Naive Bayes",
    "spec": [],
    "solutions": ["solutions.py"],
    "driver": "test_driver.py",
    "data": []
    },
"NMF_Recommender": {
    "volume": "Volume3",
    "title": "NMF Recommender Systems",
    "spec": [],
    "solutions": [],
    "driver": null,
    "data": []
    },
"DeepLearningIntro": {
    "volume": "Volume3",
    "title": "Intro to Deep Learning and PyTorch",
    "spec": ["deeplearningintro.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": []
    },
"RNN": {
    "volume": "Volume3",
    "title": "Recurrent Neural Networks",
    "spec": ["rnn.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": ["mozart_sonatas.tar.gz"]
    },
"DataAugmentation": {
    "volume": "Volume3",
    "title": "Data Augmentation",
    "spec": ["data_augmentation.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": [
        "chopin.wav",
        "creditcard.npy",
        "lion.png",
        "restaurant_ambience.wav",
        "music.zip",
        "styles.npy"  ]
    },
"Gibbs_LDA": {
    "volume": "Volume3",
    "title": "Gibbs Sampling and LDA",
    "spec": ["gibbs_lda.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": ["reagan.txt",
			"stopwords.txt"]
    },

"Animation": {
    "volume": "Volume4",
    "title": "Animation",
    "spec": ["animation.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": ["orbits.npy",
			 "vibration.npz"]
    },
"IVP": {
    "volume": "Volume4",
    "title": "Numerical Methods for Initial Value Problems; Harmonic Oscillators",
    "spec": ["ivp.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": []
    },
"WeightLoss": {
    "volume": "Volume4",
    "title": "Weight change and Predator-Prey Models",
    "spec": ["weightloss.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": []
    },
"SIR": {
    "volume": "Volume4",
    "title": "Modeling the spread of an epidemic: SIR models",
    "spec": ["SIR.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": [
			"new_york_cases.npy"]
    },
"LorenzEquations": {
    "volume": "Volume4",
    "title": "Lorenz Equations",
    "spec": ["lorenz_equations.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": []
    },
"FiniteDifferenceMethod": {
    "volume": "Volume4",
    "title": "The Finite Difference Method",
    "spec": ["finite_difference.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": []
    },
"Hysteresis": {
    "volume": "Volume4",
    "title": "Bifurcations and Hysteresis",
    "spec": ["hysteresis.ipynb"],
    "solutions": ["solution.py"],
    "driver": null,
    "data": []
    },
"HeatFlow": {
    "volume": "Volume4",
    "title": "Heat Flow",
    "spec": ["heat_equation.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": []
    },
"AnisotropicDiffusion": {
    "volume": "Volume4",
    "title": "AnisotropicDiffusion",
    "spec": [],
    "solutions": ["solutions.py"],
    "driver": null,
    "data": ["balloon.jpg",
			 "balloons_color.jpg"]
    },
"WaveEquation": {
    "volume": "Volume4",
    "title": "Wave Phenomena",
    "spec": [],
    "solutions": ["solution.py"],
    "driver": null,
    "data": []
    },
"PoissonEquation": {
    "volume": "Volume4",
    "title": "Poisson's Equation",
    "spec": ["poisson_equation.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": []
    },
"FiniteElement": {
    "volume": "Volume4",
    "title": "The Finite Element method",
    "spec": [],
    "solutions": ["solutions.py"],
    "driver": null,
    "data": []
    },
"Spectral1": {
    "volume": "Volume4",
    "title": "Method of Mean Weighted Residuals",
    "spec": ["spectral1.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": []
    },
"Spectral2": {
    "volume": "Volume4",
    "title": "A Pseudospectral method for periodic functions",
    "spec": ["spectral2.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": []
    },
"Solitons": {
    "volume": "Volume4",
    "title": "Solitons",
    "spec": ["solitons.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": []
    },
"RiverCrossing": {
    "volume": "Volume4",
    "title": "Transit time crossing a river",
    "spec": [],
    "solutions": ["solutions.py"],
    "driver": null,
    "data": []
    },
"InverseProblem": {
    "volume": "Volume4",
    "title": "Inverse Problems",
    "spec": ["inverse_problems.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": []
    },
"TotalVariation": {
    "volume": "Volume4",
    "title": "Total Variation and Image Processing",
    "spec": ["total_variation.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": []
    },
"InvertedPendulum": {
    "volume": "Volume4",
    "title": "The Inverted Pendulum",
    "spec": ["inverted_pendulum.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": []
    },
"HIV": {
    "volume": "Volume4",
    "title": "HIV Treatment Using Optimal Control",
    "spec": ["hiv.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": []
    },
"ShootingMethod": {
    "volume": "Volume4",
    "title": "The Shooting Method for Boundary Value Problems",
    "spec": ["shooting_method.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": []
    },
"ObstacleAvoidance": {
    "volume": "Volume4",
    "title": "ObstacleAvoidance",
    "spec": ["ObstacleAvoidance.ipynb"],
    "solutions": ["solutions.ipynb"],
    "driver": null,
    "data": []
    }
}
